<%= render 'github_section', :link => "https://github.com/zsll/oor_3"%>
When writing a tech blog, a single line of code is worth a thousand words. Unfortunately even when you copy a well-formatted piece of ruby code from your editor to the html, it will present:
<br>
<br>
<em>
#Believe me this is a class without syntax error
class Constant
  def self.gender
    {:female => 'gal', :male => 'guy', :else => '*@#\$'}
  end
end
</em>
<br>
<br>
Well, pretty readable. Let's try enclose the code in a <%= link_to "css pre-formatted", "http://www.w3schools.com/tags/tag_pre.asp" %> section, which gives the result below.
<pre>
#Believe me this is a class without syntax error
class Constant
  def self.gender
    {:female => 'gal', :male => 'guy', :else => '*@#\$'}
  end
end
</pre>
Um, nicer. Somehow it still looks horrible. We can do much better without too much effort in a blog site written in rails. By using the <%= link_to "highlight gem", "https://github.com/simplabs/highlight" %> and a bit of css trick, the code syntax can be highlighted in a blog page just like in an editor.
<br>
<br>
Step 1.
Include the <%= link_to "highlight gem", "https://github.com/simplabs/highlight" %> and the <%= link_to "twitter bootstrap gem", "https://github.com/seyhunak/twitter-bootstrap-rails" %> (not required for syntax highlighting, just helps beatifying) in your Gemfile.
<% code = "gem 'highlight', :require => 'simplabs/highlight'
gem 'twitter-bootstrap-rails'"%>
<%= render 'code_section', :title => "Gemfile", :code => code %>
Step 2.
Generate the highlight and bootstrap css and copy it to your assets folder.
<% code = "$ bundle install
$ rails generate bootstrap:install static' after 'bundle install
$ rails generate highlight_styles
$ cp public/stylesheets/highlight.css app/assets/stylesheets/" %>
<%= render 'code_section', :title => "terminal", :code => code %>
Now you may generate highlight effect for your code by using the <code>highlight</code> method. Let's have a look at the code in the pre-formatted section before adding any custom css. Put the following piece in your view.
<% code = "\<% code = \"#Believe me this is a class without syntax error
class Constant
  def self.gender
    {:female => 'gal', :male => 'guy', :else => '*@#\$'}
  end
end\" %\>
\<pre\>
	\<% cache Digest::SHA1.hexdigest(code) do %\>
		\<%= highlight_code(:rb, code).html_safe %\>
	\<% end %\>
\</pre\>" %>
<%= render 'code_section', :title => "/path/to/your/view.html.erb", :code => code, :lang => :erb %>
And it will present the highlighted code as below.
<% code = "#Believe me this is a class without syntax error
class Constant
  def self.gender
    {:female => 'gal', :male => 'guy', :else => '*@#\$'}
  end
end" %>
<pre>
	<% cache Digest::SHA1.hexdigest(code) do %>
		<%= highlight_code(:rb, code).html_safe %>
	<% end %>
</pre>
This looks more decent. If we do inspect element, we can see all key words are wrapped by syntax highlight tags like 'nc', 'k', 'ss'. That's how they can be marked by different colors. Well, I personally prefer a dark background to make the code section stand out. Accordingly the css of these tags needs to be overwritten to adapt to this change. Moreover, I want to prepend a header to the code section to show the file path.
<br>
<br>
Step 3.
Add the following css to customize the look of the code section. Here I am simply mimicking the style of <%= link_to "Railscast", "https://railscast.com" %>.
<% code = "
/* Code section header and blackboard, to mimic RailsCast highlight style */
.oor-code-block {
	margin: 12px 0;
	clear: both;
}

.oor-code-header {
	position: relative;
	background-color: #E0E0E0;
	font-size: 12px;
	padding: 4px 7px;
	border: solid 1px #b6b6b6;
	border-bottom: none;
}

.oor-code-ray, .oor-code-ray pre {
	font-family: 'Menlo','Courier New','Terminal',monospace;
	background-color: #232323;
	color: #E6E0DB;
	text-align: left;
	word-break: normal;
	word-wrap: normal;
}

/* Code section body, overwritten highlight.css to mimic RailsCast highlight style */
.oor-code-ray .nc, .oor-code-ray .no, .oor-code-ray .o {
	color: #fff;
}

.oor-code-ray .k {
	color: #cb7832;
}

.oor-code-ray .ss, .oor-code-ray .kp{
	color: #6c9cbd;
}

.oor-code-ray .vi {
	color: #d0cffe;
}

.oor-code-ray .nf {
	color: #ffc56d;
}

.oor-code-ray .c1 {
	color: #BC9358;
	font-style: italic;
}

.oor-code-ray .s2 {
	color: #a4c260;
}

.oor-code-ray .nb, .oor-code-ray .n {
	color: #819F7F;
}" %>
<%= render 'code_section', :title => "/app/assets/stylesheets/your.css.erb", :code => code, :lang => :css %>
Step 4.
Add a template for code section.
<% code = "\<% content = code %\>
\<% if defined?(lang) %\>
	\<% cache Digest::SHA1.hexdigest(code) do %\>
		\<% content = highlight_code(lang, code).html_safe %\>
	\<% end %\>
\<% end %\>
\<div class=\"oor-code-block\"\>
	\<div class=\"oor-code-header\"\>
		\<%=title%\>
	\</div\>
	\<div class=\"oor-code-ray\"\>
		\<div class=\"code\"\>
			\<pre\>\<%=content%\>\</pre\>
		\</div\>
	\</div\>
\</div\>" %>
<%= render 'code_section', :title => "/app/views/layouts/_code_section.html.erb", :code => code, :lang => :erb %>
Then you may render this template to make your codes shine.
<% code = "\<% code = \"#Believe me this is a class without syntax error
class Constant
  def self.gender
    {:female => 'gal', :male => 'guy', :else => '*@#\$'}
  end
end\" %\>
\<%= render 'code_section', :title => \"/path/to/your/view.html.erb\", :code => code, :lang => :rb %\>" %>
<%= render 'code_section', :title => "/path/to/your/view.html.erb", :code => code, :lang => :erb %>
The code above generates:
<% code = "#Believe me this is a class without syntax error
class Constant
  def self.gender
    {:female => 'gal', :male => 'guy', :else => '*@#\$'}
  end
end" %>
<%= render 'code_section', :title => "/path/to/your/class.rb", :code => code, :lang => :rb %>
More examples are available in <%= link_to "this repo", "https://github.com/zsll/oor_3"%>.